[
["introdu√ß√£o.html", "1 Introdu√ß√£o 1.1 Dados 1.2 O que √© an√°lise de dados?", " 1 Introdu√ß√£o A an√°lise de dados √© uma das atividades mais interessantes da atualidade, com ela √© poss√≠vel monitorar o governo, por exemplo, Opera√ß√£o serenata, fazer empresas de sucesso e produtos que atendam a real necessidade de seus clientes, e o mais importante, comprovar a veracidade de informa√ß√µes recebida e saciar nossa curiosidade. Isto porque com a quantidade de dados dispon√≠vel, podemos literalmente, saber sobre tudo, aplicando t√©cnicas de an√°lise de dados. Portanto, este minicurso tem como objetivo apresentar, de forma introdut√≥ria, as principais tecnologias para analisar dados com as linguagens de programa√ß√£o R e Python. 1.1 Dados Muito foi dito sobre dados, que estes s√£o abundantes e est√£o em constante crescimento, por√©m, o que s√£o dados? Bem esta pergunta possui diversas respostas, isto porque h√° v√°rias defini√ß√µes para dados, aqui iremos assumir que dados s√£o ‚ÄúQualquer coisa registrada com o prop√≥sito de posteriormente ser analisado‚Äù - Dr.¬†Rafael Santos. Agora que sabemos a defini√ß√£o de dados, podemos concluir que Big Data √© um alto volume de dados. N√£o entraremos no m√©rito do que √© ou n√£o considerado Big Data, caso queiram ler mais sobre o assunto, recomendamos o artigo Big data: A survey publicado por Min Chen e seus colaboradores. 1.1.1 Tipos de dados A tabela 1.1 foi feita com base no mat√©rial de estat√≠stica da UFPR e o template utilizado foi retirado do livro-texto Claus O. Wilke. Table 1.1: Tipos de vari√°veis encontradas durante um cen√°rio de an√°lise de dados Tipo vari√°vel Exemplos Escala apropriada Descri√ß√£o Quantitativa/num√©rica cont√≠nua 1.3, 5.7, 83, 1.5x10^-2 Cont√≠nuas Valores mensur√°veis que assumem valores em um escala cont√≠nua (na reta real). Usualmente devem ser medida atrav√©s de algum instrumento. Exemplo: peso(balan√ßa), tempo(rel√≥gio), e press√£o arterial. Quantitativa/num√©rica discreta 1, 2, 3, 4 Discretas Caracter√≠sticas mensur√°veis que podem assumir apenas um n√∫mero finito ou infinito cont√°vel de valores e, assim, somente fazem sentido valores inteiros. Geralmente s√£o o resultado de contagens. Exemplos: n√∫mero de filhos, n√∫mero de bact√©rias por litro de leite, n√∫mero de cigarros fumados por dia. Quantitativa/categ√≥ricas nominais Cachorro, peixe Discreto N√£o possui ordena√ß√£o dentre as categorias. Essas vari√°veis s√£o tamb√©m chamadas de factors. Exemplo: Sexo, cor dos olhos, doente/sadio. Quantitativa/categ√≥ricas ordinais Janeiro, Fevereiro Discreto Existe uma ordena√ß√£o entre as categorias. Essas vari√°veis s√£o tamb√©m chamadas de ordered factors. Exemplo: escolaridade (1¬∞, 2¬∞, 3¬∞), m√™s de observa√ß√£o(janeiro, fevereiro‚Ä¶ dezembro). Data ou tempo Jan.¬†5 2018, 8:03am Cont√≠nuo ou Discreto Dia ou hora espec√≠ficos. Tamb√©m datas gen√©ricas, Por exemplo 29 de Fevereiro em anos n√£o bissextos Texto The quick brown fox jumps over the lazy dog. Nenhum, ou discreto Texto normal e pode ser tratado como categ√≥rico se precisar. 1.1.2 Formatos de dados Como citado, existem muitos dados dispon√≠veis, estes vindos das mais diversas fontes e formatos, e boa parte dos desafios na an√°lise de dados est√° vinculada ao formato com que o dados est√£o dispon√≠veis, isto porque dependendo do formato, existem etapas de organiza√ß√£o que devem ser aplicada nos dados. ‚ÄúOs conjuntos de dados arrumados s√£o todos iguais, mas todos os conjuntos de dados confusos s√£o confusos √† sua pr√≥pria maneira.‚Äù - Hadley Wickham Nos subt√≥picos abaixo, ser√£o descritos os principais formatos de dados e alguns exemplos de cada um. 1.1.2.1 Dados estruturados Esse formato de dado segue a estrutura de linhas e colunas. S√£o geralmente encontrados em banco de dados, Excel (xls) e Comma-separated values (csv) 1.1.2.2 Dados Semiestruturados S√£o dados que possuem uma organiza√ß√£o clara, por√©m, n√£o segue o padr√£o de linha e coluna. Geralmente s√£o aqueles formatos que recebemos em requisi√ß√µes de API, por exemplo, JSON, XML e HTML. 1.1.2.3 Dados n√£o estruturados S√£o aqueles que n√£o conseguimos identificar uma organiza√ß√£o clara, geralmente, s√£o arquivos com forte teor textual, por exemplo, e-mail, tweets, PDF, imagens, v√≠deos, entre outros. Lembrando que nem todo dado desorganizado √© n√£o estruturado. 1.2 O que √© an√°lise de dados? Para John W. Tukey, grande parte da an√°lise de dados √© inferencial, ou seja, o ato de extrair informa√ß√µes de uma amostra em rela√ß√£o ao conjunto todo. √â interessante ressaltar que, an√°lise de dados n√£o √© um conceito novo, por exemplo, essa defini√ß√£o de Tukey foi publicada em 1962, no artigo The Future of Data Analysis. Infer√™ncia estat√≠stica √© um ramo da Estat√≠stica cujo objetivo √© fazer afirma√ß√µes a partir de um conjunto de valores representativo (amostra) sobre um universo (popula√ß√£o). - Wikipedia Buscando por mais defini√ß√µes, a Wikipedia descreve an√°lise de dados como o processo de observa√ß√£o, limpeza, transforma√ß√£o e modelagem de dados. Com o objetivo de extrair informa√ß√µes de dados n√£o tratados. 1.2.1 o que faz um analista de dados? O Artigo publicado pelo dataquest, define o analista de dados como um agregador de valor para a companhia atrav√©s respostas obtidas atrav√©s dos dados, dessa forma, ajudando na tomada de decis√£o da empresa. Ainda no artigo do dataquest, um analista de dados √© respons√°vel por tais tarefas: Limpeza e organiza√ß√£o de dados; Uso de estat√≠stica para ter uma vis√£o geral dos dados; An√°lise de tend√™ncias encontradas nos dados; Cria√ß√£o de gr√°ficos e dashboards para ajudar na interpreta√ß√£o e tomada de decis√£o da empresa; Apresenta√ß√£o dos resultados obtidos para os clientes. Resumindo essas tarefas, o analista deve possuir habilidades de limpeza, manipula√ß√£o e visualiza√ß√£o dos dados, entender do neg√≥cio e saber transferir as informa√ß√µes geradas de suas an√°lises para diferentes tipos clientes, com ou sem dom√≠nio t√©cnico. 1.2.2 Quais s√£o as diferen√ßas entre analista e cientista de dados? Tanto se fala de cientista dados, afinal, qual √© a diferen√ßa?üë©‚Äçüíª Acredito que seja uma d√∫vida super v√°lida, j√° que segundo a revista Harvard Business Review, cientista de dados √© considerada a profiss√£o mais sexy do s√©culo 21. Segundo Josh Wills, um cientista de dados √© melhor em estat√≠stica do que qualquer engenheiro de software e melhor em engenharia de software do que qualquer estat√≠stico&quot;. Um cientista de dados possui todas as skills que um analista, mas, em ess√™ncia, cont√©m um dom√≠nio maior em estat√≠stica, matem√°tica e Machine Learning. Em busca de um compilado de defini√ß√µes, reunimos nossa resposta com base nesses sites: dataquest edureka simplilearn, betterbuys, kdnuggets A defini√ß√£o que escolhemos foi do site kdnuggets: ‚ÄúO analista de dados √© como o Sherlock Holmes üîç do time de ci√™ncia de dados‚Äù. Ainda em sua defini√ß√£o, ‚Äúo analista busca resposta para o time e para o neg√≥cio Por outro lado o cientista, cria modelos estat√≠sticos de aprendizado de m√°quina, visualiza√ß√µes mais elaboradas e gera novas perguntas em rela√ß√£o aos dados‚Äù. Fiquem √† vontade para adicionar mais diferen√ßas, basta ler nosso README. 1.2.3 Processos da an√°lise de dados Agora que sabemos o que faz um analista de dados, √© necess√°rio entender cada etapa do processo de an√°lise de dados. A Figura 1.1 apresenta o processo mencionado, Vamos trazer uma defini√ß√£o feita pela Hadley para deixar um pouco mais elucidativo Cada processo √© abordado com detalhes em R e Python. Figure 1.1: Etapas do processo de an√°lise de dados - Fonte: Wickham and Grolemund (2017) Primeiro, √© importante importar os dados nos mais diferentes formatos .csv, .kml, .json. Ap√≥s a leitura dos dados, √© necess√°rio limp√°-los e transform√°-los no formato tidy. O termo tidy refere-se a estrutura do conjunto de dados, onde cada atributo √© uma vari√°vel e cada linha √© uma observa√ß√£o Wickham and Grolemund (2017). Por exemplo, em R: library(knitr) escola &lt;- tibble::tibble(nome=c(&quot;Joao&quot;, &quot;Maria&quot;,&quot;Helena&quot;), idade=c(14, 15, 21), escolaridade=c(&quot;EF&quot;, &quot;EM&quot;, &quot;Graduacao&quot; )) kable(escola) nome idade escolaridade Joao 14 EF Maria 15 EM Helena 21 Graduacao Sabemos que Joao tem 14 anos e est√° no ensino fundamental, seguindo a ideia do formato tidy. A etapa de transforma√ß√£o √© composta pela adi√ß√£o de novos atributos com base no conjunto de dados, por exemplo, a m√©dia da idade dos alunos, visto acima. Nesta etapa, √© importante gerar algumas perguntas sobre o seu conjunto e tentar respond√™-las realizando a manipula√ß√£o dos dados. Um exemplo de transforma√ß√£o muito utilizada, √© extrair o dia da semana de uma determinada data x. Por exemplo, em R: suppressMessages(library(lubridate)) data &lt;- lubridate::dmy(&quot;11/10/2018&quot;) lubridate::wday(data, label = TRUE) ## [1] qui ## Levels: dom &lt; seg &lt; ter &lt; qua &lt; qui &lt; sex &lt; s√°b No exemplo acima, estamos usando o pacote lubridate e com uma linha de c√≥digo descobrimos o dia da semana do dia 11 de outubro. Hadley descreve a visualiza√ß√£o e os modelos como engenharia de representa√ß√£o de conhecimento. A visualiza√ß√£o, pode gerar novos conhecimentos, questionamentos e respostas. Segundo Wilke (2019), a visualiza√ß√£o de dados, √© a parte arte e a parte ci√™ncia na √°rea de ci√™ncia de dados, portanto, a visualiza√ß√£o precisa estar correta e agrad√°vel para interpret√°-la. TIL: visualisation ou visualization tem o mesmo significado, mas, na Europa √© com ‚Äús‚Äù e na Am√©rica com ‚Äúz‚Äù. Segundo Wickham and Grolemund (2017), modelos s√£o ferramentas complementares da visualiza√ß√£o. Para Schutt and O≈Éeil (2013), realizar a an√°lise explorat√≥ria de dados (EDA) √© a etapa fundamental para criar um modelo. "],
["introdu√ß√£o-ao-r.html", "2 Introdu√ß√£o ao R 2.1 Defini√ß√£o de vari√°veis 2.2 Opera√ß√µes B√°sicas 2.3 Estruturas de decis√£o 2.4 Itera√ß√£o 2.5 Manipula√ß√£o de dados 2.6 Para saber mais", " 2 Introdu√ß√£o ao R R √© uma linguagem de programa√ß√£o de alto n√≠vel voltada para visualiza√ß√£o e an√°lise de dados. Em ess√™ncia foi inspirada na linguagem de programa√ß√£o S. Foi inicialmente escrito por Ross Ihaka and Robert Gentleman no departamente de estat√≠stica da universidade de Auckland na Nova Zel√¢ndia. Atualmente a linguagem R √© mantido pelo grupo R Core Team que s√£o pessoas do mundo inteiro tentando melhorar a linguagem dia ap√≥s dia. Esse conte√∫do foi baseado no livro THE R BOOK escrito por Crawley (2012), sendo considerado a b√≠blia do R. O kernel do R e os pacotes podem ser baixados pelo CRAN - Comprehensive R Archive Network. O objetivo deste cap√≠tulo √© trazer de forma introdut√≥ria alguns conceitos b√°sicos do R, por favor, sinta-se √† vontade para contribuir. 2.1 Defini√ß√£o de vari√°veis Para atribuir qualquer valor em uma vari√°vel usamos a &lt;- ou =, segundo Wickham and Grolemund (2017), usa-se seta &lt;- como boas pr√°ticas. Desta forma, para declarar as vari√°veis: a &lt;- &quot;Legal mesmo!&quot; b &lt;- 4224 22 -&gt; c 2.1.1 Tipos primitivos Agora que sabemos atribuir valores a uma vari√°vel, vamos falar sobre os tipos primitivos do R. Seguindo uma hierarquia, existe a classe ‚Äúpai‚Äù numeric, basicamente o numeric √© todo n√∫mero declarado sem sufixo e o seu tipo √© double. No entanto, pode-se definir o tipo integer colocando L na frente do valor (sufixo), e o complex que por sua vez usa-se o i. H√° tamb√©m a classe logical que representa os valores booleanos TRUE e FALSE. Por √∫ltimo, a classe character que representa os caracteres. Para declarar cada tipo: # Inteiro a &lt;- 7L # Double b = 14.01 # Boleano k &lt;- FALSE # Complexo g &lt;- 12i # Caractere couse &lt;- &#39;cool&#39; # Para ver inspecionar o valor das vari√°veis b ## [1] 14.01 # Para ver as classes class(a) ## [1] &quot;integer&quot; # Para ver o tipo typeof(b) ## [1] &quot;double&quot; # Para remove-las rm(a) se quiser saber mais sobre o tipo complex, deixamos um link no subcap√≠tulo Para saber mais. 2.1.2 Tipos de dados estruturados J√° que conhecemos os tipos primitivos, vamos aprender sobre vetores e matriz. Apenas relembrando, podemos dizer que vetores sempre seguem um sentido e cont√©m apenas uma linha e N colunas. Por outro lado, a matriz √© um vetor bidimensional, composta por linhas e colunas. No R h√° dois tipos de vetores: Vetores at√¥micos: compostos por todos os tipos citados acima e mais um tipo chamado raw Tipos citados: double, logical, integer, character e complex. Listas: Chamadas de vetor recursivo e pode conter outras listas. Colocando de maneira simples, vetores at√¥micos s√£o homog√™neos, ou seja, apenas aceitam um tipo. Se alocado mais de um tipo no vetor, o que acontece? Simples, √© convertido pelo tipo mais forte üë©‚Äçüî¨. A hierarquia de tipos √© apresentada na Figura 2.1. Figure 2.1: Hierarquia de dados - Fonte: Wickham and Grolemund (2017) A Figura 2.1 deve ser interpretada de baixo para cima. Seguindo essa ordem: character complex numeric double logical Todo vetor em R √© declarado usando c(), desta forma: # Vetor l√≥gico vetor_boleano &lt;- c(FALSE, TRUE, TRUE, FALSE) # Vetor n√∫merico vetor_numerico &lt;- c(3.14, 6.28, 2.3) # Vetor de caractere vetor_char &lt;- c(&#39;ola&#39;, &#39;pessoal&#39;, &#39;xd&#39;) A convers√£o de tipos √© apresentado na c√©lula abaixo: # Esse √© um vetor misturado vetor_misturado &lt;- c(&quot;sou legal&quot;, FALSE, 21) # Podemos verific√°-lo assim is.atomic(vetor_misturado) ## [1] TRUE Ent√£o, seguindo a ideia de hierarquia de tipos, esse vetor ser√° convertido para character e continuar√° at√¥mico ü•Å. Por outro lado, as listas s√£o heterog√™neas, ou seja, aceitam diversos tipos, sendo organizadas em lista de lista. Por isso, √© chamado de vetor recursivo. Podemos implement√°-la usando list(), deste modo: # Lista de boleanos lista_boleano &lt;- list(FALSE, TRUE, TRUE, FALSE) # Lista de inteiros lista_inteiro &lt;- list(12L, 10L, 7L) E a ideia de v√°rios tipos? foi tudo uma mentira? ü§∑ N√£o foi mentira, vamos criar uma lista de diversos tipos, assim: # Minha lista com todos os tipos lista_misturada &lt;- list(FALSE, 12L, &#39;t&#39;, 2i) # Ser√° ela atomica? is.atomic(lista_misturada) ## [1] FALSE Viu, n√£o era mentira, temos uma lista n√£o at√¥mica, ou seja, de v√°rios os tipos. Mas ser√° ela uma lista mesmo? üßõüèø‚Äç‚ôÇÔ∏è # Voc√™ √© uma lista mesmo? is.list(lista_boleano) ## [1] TRUE Ufa, ainda bem! üòÇ. Esqueci de dizer, que podemos checar o tamanhos dos nossos vetores usando length(). J√° sabemos de tipos de vetores, agora vamos para as matrizes. Bom, as matrizes seguem a mesma ideia dos vetores at√¥micos, confesso que n√£o uso com frequ√™ncia, mas sempre √© v√°lido saber. Podemos implement√°-la usando matrix(), deste modo: library(knitr) # Minha matriz com n√∫meros inteiros com caractere matriz &lt;- matrix(data = c(1:25, rep(&quot;legal&quot;, 5)), nrow = 5, ncol=6) # Para ver nossa matriz knitr::kable(matriz) 1 6 11 16 21 legal 2 7 12 17 22 legal 3 8 13 18 23 legal 4 9 14 19 24 legal 5 10 15 20 25 legal Ent√£o, seguindo a hierarquia de tipos, a nossa matriz ser√° convertida para character. Podemos verificar seu tipo, desta forma: # √â matriz mesmo? is.matrix(matriz) ## [1] TRUE # Sou legal ou chato? matriz[5,6] ## [1] &quot;legal&quot; Podemos acessar os valores atrav√©s dos √≠ndices de linha e coluna matriz[linha, coluna]. 2.1.3 DataFrame Para explicar o conceito de dataframe, vamos come√ßar pela pr√°tica. Primeiro, vamos ler um conjunto de dados em .csv e observar algumas caracter√≠sticas: # Lendo nosso conjunto de dados meu_dataframe &lt;- read.csv2(file = &quot;./nome_do_csv.csv&quot;, sep=&quot;,&quot;) # Verificando a classe do nosso conjunto de dados class(meu_dataframe) ## [1] &quot;data.frame&quot; # Verificando o tipo do nosso conjunto de dados typeof(meu_dataframe) ## [1] &quot;list&quot; A ideia do read.csv √© ler um .csv e passar para dataframe no R Podemos tirar algumas conclus√µes, a primeira √© que existe uma classe chamada data.frame que √© do tipo list, como visto anteriormente a lista em R √© heterog√™nea, logo, sabemos que nosso dataframe pode ter v√°rios tipos üòÄ. Para verificar a classe data.frame √© at√¥mica: # Verificando se √© atomico nosso df is.atomic(meu_dataframe) ## [1] FALSE Opa, ent√£o sabemos que dataframe √© uma classe no R tratada como um tipo list. Mas, afinal, o que √© um dataframe? ‚úã Vou usar a defini√ß√£o feita pelo livro de Limpeza de dados em R: Tipo especial de lista, onde cada coluna √© um vetor de apenas um tipo e todas as colunas t√™m o mesmo n√∫mero de registros. √â o tipo mais utilizado para se trabalhar com dados Que defini√ß√£o interessante, ent√£o, cada ‚Äòcoluna‚Äô √© vetor um at√¥mico? Para acessar cada coluna do data.frame usamos o s√≠mbolo $. Agora, vamos responder a pergunta, deste modo: # √© atomico? is.atomic(meu_dataframe$Pclass) ## [1] TRUE Olha s√≥, √© at√¥mico. Ent√£o, vamos criar uma dataframe, para fixar o aprendizado: # DataFrame[3] data_frame &lt;- data.frame( Risco=c(FALSE,FALSE, FALSE, FALSE,TRUE), Animal=c(&quot;Cachorro&quot;, &quot;Gato&quot;, &quot;Capivara&quot;, &quot;Girafa&quot;, &quot;Macaco&quot;), Periculosidade=c(200, 400, 0, 7, 1000)) # Podemos acessar os valores individuais usando o &#39;$&#39; data_frame$Animal ## [1] Cachorro Gato Capivara Girafa Macaco ## Levels: Cachorro Capivara Gato Girafa Macaco # Visualiza√ß√£o das lihas iniciais knitr::kable(head(data_frame, 3)) Risco Animal Periculosidade FALSE Cachorro 200 FALSE Gato 400 FALSE Capivara 0 2.2 Opera√ß√µes B√°sicas Agora que j√° sabemos como declarar uma vari√°vel, um vetor e um dataframe, nessa se√ß√£o vamos dar algumas dicas e falar sobre alguns m√©todos estat√≠sticos. 2.2.1 Dicas √∫teis Para importar os pacotes no R usa-se o comando library() e para instalar install.packages(). Caso esteja com d√∫vida sobre uma determinada fun√ß√£o, use o comando ?nome_da_funcao() ou pacote::nome_da_funcao. # Para usar algum pacote library(kohonen) # Para instalar algum pacote que esteja #install.packages(&quot;meupacotefavorite&quot;) # Fun√ß√£o do pacote kohonen ?som() Para especificar algum diret√≥rio para trabalhar, usamos o comando setwd() e para verificar o diret√≥rio atual getwd(). # Para verificar seu diret√≥rio atual getwd() ## [1] &quot;/home/felipe/R/introducao-analise-de-dados/src-material&quot; # Para definir um novo diret√≥rio #setwd(&quot;~/R/ggsom/&quot;) 2.2.2 Estat√≠stica b√°sica Vamos pular as defini√ß√µes das fun√ß√µes estat√≠sticas que ser√£o abordadas, sendo as medidas de posi√ß√£o: M√©dia Mediana e as medidas de dispers√£o: Desvio padr√£o Para verificar o desvio padr√£o do conjunto, podemos utilizar a fun√ß√£o sd() do pacote stats. Podemos verificar a m√©dia com mean() que √© uma fun√ß√£o do pacote base e a mediana com median() do pacote stats. Como demonstra√ß√£o, vamos utilizar o conjunto de dados do filme star wars ‚ò∫Ô∏è # Vamos usar o dado do filme Star Wars do pacote dplyr* suppressMessages(library(dplyr)) starwars &lt;- dplyr::starwars # Desse modo o dataset √© carregado no nosso ambiente, use ls() data(starwars) # Vamos visualizar o dado dplyr::glimpse(starwars) ## Observations: 87 ## Variables: 13 ## $ name &lt;chr&gt; &quot;Luke Skywalker&quot;, &quot;C-3PO&quot;, &quot;R2-D2&quot;, &quot;Darth Vader&quot;, &quot;Leia O‚Ä¶ ## $ height &lt;int&gt; 172, 167, 96, 202, 150, 178, 165, 97, 183, 182, 188, 180, ‚Ä¶ ## $ mass &lt;dbl&gt; 77.0, 75.0, 32.0, 136.0, 49.0, 120.0, 75.0, 32.0, 84.0, 77‚Ä¶ ## $ hair_color &lt;chr&gt; &quot;blond&quot;, NA, NA, &quot;none&quot;, &quot;brown&quot;, &quot;brown, grey&quot;, &quot;brown&quot;, ‚Ä¶ ## $ skin_color &lt;chr&gt; &quot;fair&quot;, &quot;gold&quot;, &quot;white, blue&quot;, &quot;white&quot;, &quot;light&quot;, &quot;light&quot;, ‚Ä¶ ## $ eye_color &lt;chr&gt; &quot;blue&quot;, &quot;yellow&quot;, &quot;red&quot;, &quot;yellow&quot;, &quot;brown&quot;, &quot;blue&quot;, &quot;blue&quot;‚Ä¶ ## $ birth_year &lt;dbl&gt; 19.0, 112.0, 33.0, 41.9, 19.0, 52.0, 47.0, NA, 24.0, 57.0,‚Ä¶ ## $ gender &lt;chr&gt; &quot;male&quot;, NA, NA, &quot;male&quot;, &quot;female&quot;, &quot;male&quot;, &quot;female&quot;, NA, &quot;m‚Ä¶ ## $ homeworld &lt;chr&gt; &quot;Tatooine&quot;, &quot;Tatooine&quot;, &quot;Naboo&quot;, &quot;Tatooine&quot;, &quot;Alderaan&quot;, &quot;‚Ä¶ ## $ species &lt;chr&gt; &quot;Human&quot;, &quot;Droid&quot;, &quot;Droid&quot;, &quot;Human&quot;, &quot;Human&quot;, &quot;Human&quot;, &quot;Hum‚Ä¶ ## $ films &lt;list&gt; [&lt;&quot;Revenge of the Sith&quot;, &quot;Return of the Jedi&quot;, &quot;The Empir‚Ä¶ ## $ vehicles &lt;list&gt; [&lt;&quot;Snowspeeder&quot;, &quot;Imperial Speeder Bike&quot;&gt;, &lt;&gt;, &lt;&gt;, &lt;&gt;, &quot;I‚Ä¶ ## $ starships &lt;list&gt; [&lt;&quot;X-wing&quot;, &quot;Imperial shuttle&quot;&gt;, &lt;&gt;, &lt;&gt;, &quot;TIE Advanced x1‚Ä¶ # Vamos ver a m√©dia de ano de nascimento mean(starwars$birth_year) ## [1] NA # oops... - Observe que o NA atrapalha nossa m√©dia,vamos remov√™-lo mean(starwars$birth_year, na.rm = TRUE) ## [1] 87.56512 # Mediana median(starwars$birth_year, na.rm = TRUE) ## [1] 52 # Podemos procurar pela menor data de nascimento min(starwars$birth_year, na.rm = TRUE) ## [1] 8 # Pelo m√°ximo tamb√©m max(starwars$birth_year, na.rm = TRUE) ## [1] 896 # Desvio padr√£o sd(starwars$birth_year, na.rm = TRUE) ## [1] 154.6914 2.3 Estruturas de decis√£o Os IF's da vida, se n√£o fosse por isso, aconteceria tal coisa. Bom, no R, a estrutura de decis√£o √© bem parecida com a do Java, ainda com o conjunto do star wars: personagem &lt;- &quot;BB8&quot; if(personagem %in% starwars$name){ &quot;Tem o personagem BB8 nos dados&quot; } else if(&quot;Padm√©&quot; %in% starwars$name) { &quot;Tem a personagem Padm√© nos dados&quot; } else { &quot;N√£o possui esse personagem&quot; } ## [1] &quot;Tem o personagem BB8 nos dados&quot; 2.4 Itera√ß√£o Para o for podemos utilizar o famoso foreach, parecido com Python, desta maneira: # Foreach for(i in head(starwars$name, 3)){ print(i) } ## [1] &quot;Luke Skywalker&quot; ## [1] &quot;C-3PO&quot; ## [1] &quot;R2-D2&quot; 2.5 Manipula√ß√£o de dados Vamos utilizar o pacote dplyr do kit de ferramentas Tidyverse. Vamos criar um data.frame para a manipula√ß√£o, desta maneira: meu_df &lt;- data.frame( aluno_id = c(1, 2, 3, 4, 5, 6), aluno_sexo = c(&quot;Masculino&quot;, &quot;Feminino&quot;,&quot;Masculino&quot;, &quot;Feminino&quot;, &quot;Masculino&quot;, &quot;Feminino&quot;), aluno_curso = c(&quot;Historia&quot;, &quot;Historia&quot;, &quot;Matem√°tica&quot;, &quot;Estat√≠stica&quot;, &quot;Matem√°tica&quot;, &quot;Estat√≠stica&quot;), aluno_media = c(2.1, 3.5, 4.0, 1.0, NA, 4.9), aluno_avaliacao = c(&quot;Ruim&quot;, &quot;Ruim&quot;, &quot;Excelente&quot;, &quot;Ruim&quot;, &quot;Nenhum&quot;, &quot;Excelente&quot;)) knitr::kable(meu_df) aluno_id aluno_sexo aluno_curso aluno_media aluno_avaliacao 1 Masculino Historia 2.1 Ruim 2 Feminino Historia 3.5 Ruim 3 Masculino Matem√°tica 4.0 Excelente 4 Feminino Estat√≠stica 1.0 Ruim 5 Masculino Matem√°tica NA Nenhum 6 Feminino Estat√≠stica 4.9 Excelente Vamos utilizar os seguintes m√©todos de manipula√ß√£o do dplyr: select - Seleciona as colunas do dataframe filter - Filtra algum valor da coluna mutate - Cria novas vari√°veis no dataframe group_by - agrupa de acordo com um vetor de categorias summarize - Reduz os valores para um √∫nico resumo. Vamos manipular nosso dataframe com base nos m√©todos acima: library(dplyr) filtro &lt;- dplyr::filter(meu_df, meu_df$aluno_avaliacao == &quot;Ruim&quot;) selecao &lt;- dplyr::select(filtro, aluno_curso, aluno_avaliacao, aluno_media) grupo &lt;- dplyr::group_by(selecao, aluno_curso) media &lt;- dplyr::summarize(grupo, media_grupo = mean(aluno_media)) knitr::kable(media) aluno_curso media_grupo Estat√≠stica 1.0 Historia 2.8 Basicamente, filtramos pelo atributo aluno_avaliacao, selecionamos os atributos aluno_curso, aluno_avaliacao e aluno_media, agrupamos pelos cursos e tiramos a m√©dia daquele grupo em rela√ß√£o os cursos üêª. Mas, ficou muito grande, n√£o podemos melhorar? Podemos sim, substituindo por apenas uma vari√°vel, desta forma: meu_df1 &lt;- dplyr::filter(meu_df, meu_df$aluno_avaliacao ==&quot;Ruim&quot;) meu_df1 &lt;- dplyr::select(meu_df1, aluno_curso, aluno_avaliacao, aluno_media) meu_df1 &lt;- dplyr::group_by(meu_df1, aluno_curso) meu_df1 &lt;- dplyr::summarize(meu_df1, media_grupo = mean(aluno_media)) knitr::kable(meu_df1) aluno_curso media_grupo Estat√≠stica 1.0 Historia 2.8 Aee, melhorou um pouco, n√£o? üî∑. Podemos melhorar ainda mais, como? Usando %&gt;% este s√≠mbolo, chamado de pipe ou ent√£o, basicamente, √© a pipe utilizada no Linux, mas o que faz? A pipe passa a resposta da primeira atribui√ß√£o para o primeiro par√¢metro da fun√ß√£o seguinte, desta forma: meu_vetor &lt;- c(1, 3, 5, 7, 9) %&gt;% mean() meu_vetor ## [1] 5 Ent√£o, podemos ver que n√£o coloco o meu_vetor como par√¢metro para a fun√ß√£o mean(), mas, e se eu quiser colocar mais par√¢metros? Opa, voc√™ pode e deve, segue a mesma linha de rac√≠ocio da fun√ß√£o normal, desta forma: meu_vetor &lt;- c(2, 4, 6, 8, NA) %&gt;% mean(na.rm=TRUE) meu_vetor ## [1] 5 Agora, vamos otimizar nossa manipula√ß√£o usando pipe, desta forma: df &lt;- meu_df %&gt;% filter(aluno_avaliacao == &quot;Ruim&quot;) %&gt;% select(aluno_curso, aluno_avaliacao, aluno_media) %&gt;% group_by(aluno_curso) %&gt;% summarize(media_grupo = mean(aluno_media)) knitr::kable(df) aluno_curso media_grupo Estat√≠stica 1.0 Historia 2.8 Essa √© a principal fun√ß√£o do pipe, tornar o c√≥digo mais limpo e reprodut√≠vel. 2.6 Para saber mais N√∫meros complexos - 1 Tipos n√∫mericos em R - 2 Diferen√ßa entre lista e vetor - 3 CRAN - 4 R eficiente - 5 2.6.1 Materiais utilizados como base Rafael Santos Jos√© Roberto M. Garcia "],
["introdu√ß√£o-ao-python.html", "3 Introdu√ß√£o ao Python üöÄ 3.1 Introdu√ß√£o ao Pandas üêº 3.2 Estruturas de dados 3.3 Para saber mais", " 3 Introdu√ß√£o ao Python üöÄ Python √© uma linguagem multiparadigma, com uma sintaxe muito simples que permite ao utilizador focar no problema e deixar de lado qualquer tipo de especificidade. Vem sendo amplamente utilizada em diversas √°reas, principalmente, por cona das milhares de bibliotecas que possui, todas elas distribu√≠das pela comunidade incr√≠vel que a linguagem possui ‚ù§Ô∏è Nesta introdu√ß√£o, o foco ser√° a aplica√ß√£o da linguagem Python na manipula√ß√£o e tratamento de dados, utilizando como base a biblioteca Pandas. Voc√™ pode estar se perguntando o motivo da utiliza√ß√£o desta biblioteca e a resposta √© bem simples, Python √© uma linguagem para uso geral, assim, suas fun√ß√µes nativas n√£o tem foco em uma aplica√ß√£o espec√≠fica, como acontece em linguagens como R e Julia, que possuem √°reas espec√≠ficas de aplica√ß√£o, assim n√£o podemos esperar que, nativamente a linguagem tenha m√©todos variados para a manipula√ß√£o e tratamento de dados e √© nesta parte que o pandas entra, facilitando toda manipula√ß√£o e tratamento de dados com fun√ß√µes incr√≠veis. Vamos come√ßar ! 3.1 Introdu√ß√£o ao Pandas üêº Como forma de iniciar, vamos come√ßar entendendo o que √© a biblioteca Pandas e qual seu objetivo geral, para isto, vejamos a defini√ß√£o feita na documenta√ß√£o oficial do projeto. Pandas √© uma biblioteca open source, licenciada pelo BSD, que fornece estruturas de dados de alto desempenho e f√°ceis de usar e ferramentas de an√°lise de dados para a linguagem de programa√ß√£o Python. Veja ent√£o que, tudo o que √© necess√°rio para a realiza√ß√£o da maioria dos casos de an√°lise de dados utilizando a linguagem Python, ir√£o, bem provavelmente, trabalhar com esta biblioteca. Para que se tenha uma ideia, o pandas pode ser aplicado em an√°lises envolvendo: Finan√ßas; Geoci√™ncias; Ci√™ncia social; Al√©m de diversas outras √°reas de ci√™ncias e engenharia. Isto tudo por contar com diversas fun√ß√µes e estruturas de dados que facilitam os processos de an√°lise, essas discutidas nos pr√≥ximos t√≥picos. 3.2 Estruturas de dados O Pandas disponibiliza diversas estruturas de dados, sendo as principais: Series; DataFrames. Nos subt√≥picos abaixo vamos ver as caracter√≠sticas de cada uma destas estruturas, e em seguida, veremos alguns utilit√°rios para leitura dos dados com Pandas. 3.2.1 Series As Series s√£o estruturas de dados unidimensionais, que contam com diversos m√©todos para a manipula√ß√£o de dados. Pode-se entender que as Series s√£o estruturas de dados simples, assim como as listas padr√µes da linguagem Python, com uma pequena diferen√ßa, para cada item dentro de uma Series tem-se √≠ndices, em formatos de texto ou num√©ricos. Vamos come√ßar a utiliza√ß√£o, para facilitar o entendimento. Para iniciar, vamos importar a biblioteca pandas com o ‚Äòapelido‚Äô de pd, em seguida, vamos criar uma Series simples, passando como par√¢metro de entrada uma lista com tr√™s valores, veja: import pandas as pd s = pd.Series([1, 2, 3]); print(s) ## 0 1 ## 1 2 ## 2 3 ## dtype: int64 √â interessante notar o √≠ndice na Series (Lateral esquerda), citado anteriormente, que permitem uma recupera√ß√£o r√°pida e simples, sendo muito parecidas com a recupera√ß√£o de valores em um dicion√°rio em Python, a diferen√ßa aqui √© que, estas estruturas de dados s√£o criadas para trabalhar com grandes conjuntos de dados, sem contar nas facilidades de manipula√ß√£o dos dados. print(s[0]) # Recupera o valor do √≠ndice com nome 0 ## 1 Para visualizar somente o √≠ndice, utilizamos o atributo index. print(s.index) ## RangeIndex(start=0, stop=3, step=1) Este tamb√©m pode ser facilemente editado. s.index = [&quot;um&quot;, &quot;dois&quot;, &quot;tres&quot;] print(s.index) ## Index([&#39;um&#39;, &#39;dois&#39;, &#39;tres&#39;], dtype=&#39;object&#39;) Tamb√©m √© poss√≠vel j√° criar uma Series com um √≠ndice personalizado, para isto, basta passar no construtor, uma lista representado o √≠ndice antes dos dados, veja: s = pd.Series([7, 8, 9], [1, 2, 3]) # ou # s = pd.Series([7, 8, 9], index=[1, 2, 3]) # Fica explicito quem √© o √≠ndice Veja que a primeira lista passada representa o √≠ndice, e a segunda os dados. print(s) ## 1 7 ## 2 8 ## 3 9 ## dtype: int64 √â poss√≠vel tamb√©m, transformar facilmente os dicion√°rios em Series. dicto = { &#39;faculdade&#39;: &#39;Fatec&#39;, &#39;nota&#39;: 10 } dicto_s = pd.Series(dicto); print(dicto_s) ## faculdade Fatec ## nota 10 ## dtype: object Ap√≥s a convers√£o, o uso √© basicamente o mesmo do dicion√°rio, por√©m com os benef√≠cios j√° citados. Al√©m do que j√° foi dito sobre os Series, √© importante lembrar que, estas estruturas de dados possuem diversos m√©todos para facilitar a manipula√ß√£o e entendimento dos dados, vamos a alguns destes m√©todos. Por√©m, como citado l√° no in√≠cio deste tutorial, as Series s√£o estruturas unidimensionais, o que significa que todo o trabalho com estas estruturas √© feito utilizando apenas como base as linhas, n√£o sendo poss√≠vel a utiliza√ß√£o atrav√©s de colunas. Como exemplo, vamos tentar inserir uma matriz de dados dentro de uma Series, veja que √© poss√≠vel, mas, tudo ser√° tratado como listas de listas, de forma separada. matriz = pd.Series([[1, 2, 3], [4, 5, 6]]) print(matriz) ## 0 [1, 2, 3] ## 1 [4, 5, 6] ## dtype: object Percebeu ? N√£o h√° uma matriz, e sim v√°rias listas dentro de listas em cada linha. Para estes casos √© necess√°rio o uso de uma outra estrutura de dados, o DataFrame, tratado no subt√≥pico seguinte. 3.2.2 Dataframes Agora que voc√™ j√° conhece como as Series funcionam, vamos apresentar a voc√™ o DataFrame, que difere das Series por serem multidimensionais, ou seja, aqui temos uma estrutura que trabalhar√° com linhas e colunas (Podemos dizer tamb√©m que temos matrizes aqui) üåà. Boa parte dos m√©todos dispon√≠veis em uma Series tamb√©m √© aplic√°vel em DataFrames, o que ajuda no aprendizado de utiliza√ß√£o da API do pandas, mas √© importante entender que, em diversos casos o simples fato de haver mais dimens√µes nos dados torna a manipula√ß√£o diferente, com resultados diferentes (Isto para os mesmos m√©todos), sem contar que o armazenamento tamb√©m pode diferir. Vejamos algumas caracter√≠sticas bacanas dos DataFrames matriz = pd.DataFrame([[1, 2, 3], [4, 5, 6]]) print(matriz) ## 0 1 2 ## 0 1 2 3 ## 1 4 5 6 O mesmo processo feito acima, quando realizado nas Series gerou listas de listas, aqui n√£o, tem-se uma matriz com formas de recupera√ß√£o por linhas e colunas. Da mesma forma que as Series, os DataFrames tem o √≠ndice que pode ser nomeado, e al√©m destes, as colunas, que tamb√©m podem ser nomeadas e utilizadas para a recupera√ß√£o de dados. tabela = pd.DataFrame([[.9, .8, .7], [.4, .5, .7]], columns = [&#39;primeiro&#39;, &#39;segundo&#39;, &#39;terceiro&#39;], index = [&#39;zero&#39;, &#39;um&#39;]) print(tabela) ## primeiro segundo terceiro ## zero 0.9 0.8 0.7 ## um 0.4 0.5 0.7 Pode-se tamb√©m utilizar os dicion√°rios e trasforma-los em DataFrames, veja como isto √© feito. dicto = { &#39;nome&#39;: [&#39;felipe&#39;, &#39;maria&#39;], &#39;idade&#39;: [12, 13] } df = pd.DataFrame(dicto); print(df) ## idade nome ## 0 12 felipe ## 1 13 maria Bem, agora que voc√™ entendeu a diferen√ßa fundamental entre estas estruturas de dados, vamos para a parte de manipula√ß√£o delas. 3.2.3 Sele√ß√£o e filtro dos dados Uma parte muito importante √© a sele√ß√£o e filtro dos dados, com elas basicamente faremos a manipula√ß√£o dos dados. Vamos come√ßar fazendo a busca utilizando os √≠ndices (index) e as colunas (No caso dos DataFrames). Para isto, vamos utilizar os m√©todos .loc, que permitem buscar uma linha com algum nome de √≠ndice espec√≠fico e o .iloc que busca uma linha em uma posi√ß√£o espec√≠fica. A sintaxe de utiliza√ß√£o b√°sica para as duas estruturas de dados podem ser vistas abaixos: DataFrame Series .loc[linha, coluna] .loc[linha] .iloc[linha] .iloc[linha] No caso do .loc a sintaxe muda exatamente pelas diferen√ßas apresentadas entre o Series e o DataFrame. Para o caso do .iloc ele busca somente a posi√ß√£o da linha, nas duas estruturas. df = pd.DataFrame({ &#39;nome&#39;: [&#39;Joana&#39;, &#39;Maria&#39;, &#39;Josefa&#39;], &#39;idade&#39;: [15, 18, 21], &#39;nota&#39;: [8, 9, 10] }, index = [7, 8, 9]) # Recuperando a aluna com index 9 df.loc[9, &#39;nome&#39;] # √â poss√≠vel tamb√©m recuperar mais de uma coluna com o .loc ## &#39;Josefa&#39; df.loc[9, [&#39;nome&#39;, &#39;idade&#39;]] # Recuperando a aluna na posi√ß√£o 2 ## nome Josefa ## idade 21 ## Name: 9, dtype: object df.iloc[2][&#39;nome&#39;] # Recuperando duas colunas ## &#39;Josefa&#39; df.iloc[2][[&#39;nome&#39;, &#39;idade&#39;]] ## nome Josefa ## idade 21 ## Name: 9, dtype: object Dentro destes m√©todos de busca ainda √© poss√≠vel passar uma express√£o booleana, para realizar um filtro dos dados. df = pd.DataFrame({&#39;coluna&#39;: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]}) df[df[&#39;coluna&#39;] &gt;= 5] ## coluna ## 4 5 ## 5 6 ## 6 7 ## 7 8 ## 8 9 ## 9 10 E isto tamb√©m vale para as Series, utilizando a mesma estrutura. Bem, este √© o b√°sico para a manipula√ß√£o e filtragem dos dados, existem muitos m√©todos para a manipula√ß√£o e filtragem, aqui ainda veremos alguns deles, mas, inicialmente estes j√° resolver muitos problemas das etapas de an√°lise de dados. 3.2.4 Agrupamento de dados e agrega√ß√µes Muitas vezes queremos agrupar nossos dados, seja para facilitar a manipula√ß√£o, o entendimento das rela√ß√µes dos dados, ou mesmo para aplicar fun√ß√µes sobre cada um dos grupos e obter informa√ß√µes a partir disto. Para isto utilizamos os agrupamentos e agrega√ß√µes. As agrega√ß√µes apresentam diversas deriva√ß√µes de defini√ß√£o, a utiliza aqui ser√° a que, s√£o opera√ß√µes aplicadas sobre os dados que resultam em um conjunto de valores, ou mesmo um valor escalar. Entenda que, o retorno pode mudar de acordo com a estrutura de dados onde se aplica a agrega√ß√£o, no caso das Series ser√° retornado apenas um valor e no caso dos DataFrames um valor para cada linha/coluna (Variando com a defini√ß√£o do usu√°rio) √© retornado. Algumas opera√ß√µes de agrega√ß√£o s√£o: sum() -&gt; Realiza somat√≥rio; min() -&gt; Busca o valor m√≠nimo; max() -&gt; Busca o valor m√°ximo; count() -&gt; Realiza a contagem de elementos. s = pd.Series([1, 2, 3]) df = pd.DataFrame([[1, 2, 3,], [4, 5, 6]]) # Agregando Series print(s.sum()) # Agredando DataFrame ## 6 print(df.sum()) ## 0 5 ## 1 7 ## 2 9 ## dtype: int64 J√° o agrupamento representa a divis√£o dos dados, em conjuntos que possuem alguma similaridade (O crit√©rio de similaridade √© definido pelo usu√°rio), no pandas o agrupamento √© realizado com o m√©todo groupby presente nas classes Series e DataFrames. Aqui vamos focar no agrupamento das Series. df = pd.DataFrame({ &#39;nome&#39;: [&#39;Tel1&#39;, &#39;Tel2&#39;, &#39;Tel3&#39;], &#39;tipo&#39;: [&#39;antigo&#39;, &#39;novo&#39;, &#39;novo&#39;] }) # Etapa de divis√£o dos dados agrupado = df.groupby(&#39;tipo&#39;) No exemplo acima, os dados foram agrupados de acordo com a coluna tipo. O que √© esperado como retorno do m√©todo groupby ? Intuitivamente pensamos em um conjunto de DataFrames, cada um representando um grupo e √© exatamente isto que o Pandas retorna, por√©m h√° algumas particularidades. O tipo retornado de um groupby deixa de ser um DataFrame e passa a ser um DataFrameGroupBy que possibilita e facilita a manipula√ß√£o dos grupos. Caso voc√™ queira ver os grupos gerados, use o atributo groups no objeto gerado com o groupby. print(agrupado.groups) ## {&#39;novo&#39;: Int64Index([1, 2], dtype=&#39;int64&#39;), &#39;antigo&#39;: Int64Index([0], dtype=&#39;int64&#39;)} Bem, ao juntarmos os conceitos de agrega√ß√£o e agrupamento, temos um processo que pode ser um problema de ser entendido, para isto, vamos utilizar a defini√ß√£o feita por Hadley Wickham, onde ele simplesmente separa todo o processo em etapas, sendo estas: Dividir-Aplicar-Combinar. O processo de dividir √© o agrupamento, onde os dados s√£o agrupados de acordo com alguma caracter√≠stica definida previamente, a aplica√ß√£o realiza as agrega√ß√µes, filtros ou transforma√ß√µes e por fim a combina√ß√£o, que representa a jun√ß√£o dos resultados das etapas anteriores. Para que se haja um entendimento melhor, vamos criar um exemplo. df = pd.DataFrame({ &#39;nome&#39;: [&#39;felipe&#39;, &#39;jo√£o&#39;, &#39;maria&#39;, &#39;ana&#39;], &#39;idade&#39;: [19, 19, 20, 20], &#39;dinheiro&#39;: [100, 100, 150, 150] }) Vamos agrupar estes dados, levando em considera√ß√£o a idade. # Esta √© a etapa de divir, da defini√ß√£o do Hedley agrupado = df.groupby(&#39;idade&#39;) # Aplicando uma agrega√ß√£o ## Esta √© a etapa de aplica√ß√£o e jun√ßa√µ, definida pelo Hedley print(agrupado.count()) ## dinheiro nome ## idade ## 19 2 2 ## 20 2 2 Veja que o agrupamento e a contagem foi realizado, mas caso eu queira aplicar uma agrega√ß√£o em uma coluna especifica ? Voc√™ pode! # Agregando somente o dinheiro de cada grupo print(agrupado[&#39;dinheiro&#39;].sum()) ## idade ## 19 200 ## 20 300 ## Name: dinheiro, dtype: int64 3.2.5 Fun√ß√µes de leitura e escrita de dados Al√©m das estruturas de dados poderosas, o pandas tamb√©m possui fun√ß√µes para leitura e escrita de dados que facilitam muito a vida üöÄ. Existem diversas fun√ß√µes de leitura, aqui ser√£o apresentadas apenas algumas, mas n√£o deixe de conferir a documenta√ß√£o do projeto para entender melhor as fun√ß√µes de leitura e escrita de dados. Para a leitura de dados no formato csv, podemos utilizar a fun√ß√£o read_csv. df = pd.read_csv(&#39;data/titanic.csv&#39;) # O caminho pode ser diferente eu sua m√°quina print(df.head()) # Fun√ß√£o que mostra o in√≠cio do DataFrame carregado ## PassengerId Pclass ... Cabin Embarked ## 0 892 3 ... NaN Q ## 1 893 3 ... NaN S ## 2 894 2 ... NaN Q ## 3 895 3 ... NaN S ## 4 896 3 ... NaN S ## ## [5 rows x 11 columns] print(df.tail()) # Fun√ß√£o que mostra o final do DataFrame carregado ## PassengerId Pclass Name ... Fare Cabin Embarked ## 413 1305 3 Spector, Mr. Woolf ... 8.0500 NaN S ## 414 1306 1 Oliva y Ocana, Dona. Fermina ... 108.9000 C105 C ## 415 1307 3 Saether, Mr. Simon Sivertsen ... 7.2500 NaN S ## 416 1308 3 Ware, Mr. Frederick ... 8.0500 NaN S ## 417 1309 3 Peter, Master. Michael J ... 22.3583 NaN C ## ## [5 rows x 11 columns] Caso os dados que voc√™ est√° coletando sejam oriundos de alguma API Rest o pandas tamb√©m pode te ajudar! Com o m√©todo read_json voc√™ pode passar n√£o s√≥ o nome do arquivo json em sua m√°quina, mas tamb√©m a URL da API que distribui tais dados. Ao fazer isto, o pandas trata de j√° transformar os dados na estrutura adequada, podendo ser uma Series ou DataFrame, veja como a utiliza√ß√£o √© simples. json_frame = pd.read_json(&#39;http://dummy.restapiexample.com/api/v1/employees&#39;) print(json_frame.head()) ## employee_age employee_name employee_salary id profile_image ## 0 546 gdfg 4534 1 ## 1 23 Dummmmmmmy 1123 24634 ## 2 23 twa1,2,3 0 24638 ## 3 23 KJ 555 24645 ## 4 33 Kalyani 100000 24655 print(json_frame.columns) # Recupera as colunas do DataFrame ## Index([&#39;employee_age&#39;, &#39;employee_name&#39;, &#39;employee_salary&#39;, &#39;id&#39;, ## &#39;profile_image&#39;], ## dtype=&#39;object&#39;) Da mesma forma que a leitura, fazer escrita de dados com pandas √© muito simples, tendo os dados em Series ou DataFrame √© poss√≠vel salvar os dados em diferentes formatos. Por exemplo, para salvar uma Serie ou um DataFrame em um arquivo CSV o m√©todo to_csv pode ser utilizado. Mas caso voc√™ queira salvar em um arquivo json, basta trocar o m√©todo to_csv para to_json e pronto! Seus dados j√° estar√£o disponibilizados no sistema de arquivo nos formados indicados. df.to_csv(&#39;nome_do_csv.csv&#39;) # Salva o CSV df.to_json(&#39;nome_do_json.json&#39;) # Salva o JSON Viu ? √â tudo muito simples e direto, o que te permite focar em sua an√°lise e deixar de lado problemas com sintaxe üóΩ. Para fechar esta introdu√ß√£o a an√°lise de dados, vamos ver um pouco sobre visualiza√ß√£o de dados, que facilita e potencializa a an√°lise de dados. 3.3 Para saber mais N√£o deixe de buscar mais informa√ß√µes! Abaixo alguns links que podem ser √∫teis. Python Data Science Handbook Documenta√ß√£o - Pandas "],
["introdu√ß√£o-ao-ggplot.html", "4 Introdu√ß√£o ao ggplot üìä 4.1 O que √© o ggplot? 4.2 Mapeamento Est√©tico 4.3 Objetos geom√©tricos 4.4 Escalas 4.5 Subplots 4.6 Temas 4.7 Recomenda√ß√µes", " 4 Introdu√ß√£o ao ggplot üìä Escolhemos o pacote de visualiza√ß√£o de dados ggplot2 para R e Python, pois sua sintaxe √© amig√°vel, a qual segue o conceito de gram√°tica dos gr√°ficos. Desta forma, a comunidade de Python resolveu criar uma biblioteca baseada no ggplot2 chamada plotnine. 4.1 O que √© o ggplot? Bom, ggplot√© um pacote em R criado pelo Hadley Wickham, como mencionado anteriormente, sua sintaxe se baseia na obra The Grammar of Graphics. Assim, a gram√°tica dos gr√°ficos √© um conjunto de camadas, cujo o mapeamento dos atributos √© chamado de aesthetics. O esqueleto pode ser escrito assim: ggplot(data = &lt;DATA&gt;, aes(&lt;MAPPINGS&gt;)) + &lt;GEOM_FUNCTION&gt;( mapping = aes(&lt;MAPPINGS&gt;), stat = &lt;STAT&gt;, position = &lt;POSITION&gt; ) + &lt;COORDINATE_FUNCTION&gt; + &lt;FACET_FUNCTION&gt; Vamos explicar linha por linha do c√≥digo acima. Vamos l√° üßÆ. 4.2 Mapeamento Est√©tico Podemos mapear dentro da fun√ß√£o ggplot() ou dentro de alguma geometria. A imagem abaixo, retirada do livro do Wilke (2019), mostra os m√©todos geom√©tricos do mapeamento est√©tico. Vamos come√ßar criando um dataframe, deste modo: escola &lt;- data.frame( aluno_id = c(1, 2, 3, 4, 5, 6), aluno_sexo = c(&quot;Masculino&quot;, &quot;Feminino&quot;,&quot;Masculino&quot;, &quot;Feminino&quot;, &quot;Masculino&quot;, &quot;Feminino&quot;), aluno_curso = c(&quot;Historia&quot;, &quot;Historia&quot;, &quot;Matem√°tica&quot;, &quot;Estat√≠stica&quot;, &quot;Matem√°tica&quot;, &quot;Estat√≠stica&quot;), aluno_media = c(2.1, 3.5, 4.0, 1.0, NA, 4.9), aluno_avaliacao = c(&quot;Ruim&quot;, &quot;Ruim&quot;, &quot;Excelente&quot;, &quot;Ruim&quot;, &quot;Nenhum&quot;, &quot;Excelente&quot;)) knitr::kable(escola) aluno_id aluno_sexo aluno_curso aluno_media aluno_avaliacao 1 Masculino Historia 2.1 Ruim 2 Feminino Historia 3.5 Ruim 3 Masculino Matem√°tica 4.0 Excelente 4 Feminino Estat√≠stica 1.0 Ruim 5 Masculino Matem√°tica NA Nenhum 6 Feminino Estat√≠stica 4.9 Excelente Agora, vamos mapear os atributos do nosso dataframe escola, desta forma: library(ggplot2) ggplot(escola, aes(x=aluno_id, y=aluno_media, color=aluno_curso)) Bom, agora que mapeamos nossos atributos √© poss√≠vel ver que no eixo x est√° escrito aluno_id e no eixo y est√° escrito aluno_media. 4.3 Objetos geom√©tricos Aprendemos o mapeamento est√©tico, agora vamos colocar alguns objetos geom√©tricos no nosso gr√°fico, com base nessa tabela, retirado da livro Ci√™ncia de dados em R: Tipo Objeto Geom√©trico Dispers√£o (scatterplot) geom_point() Gr√°fico de bolhas geom_point() Gr√°fico de barras Histograma geom_bar() e geom_col() geom_histogram() Boxplot geom_boxplot() Densidade geom_density() Gr√°fico de linhas geom_line() Vamos utilizar geom_point para fazer um gr√°fico bolhas no conjunto de dados, deste modo: ggplot(escola, aes(x=aluno_id, y=aluno_media, color=aluno_curso)) + geom_point(na.rm = TRUE) Olha que legal. No entanto, ainda faltam informa√ß√µes no nosso gr√°ficos, por exemplo, no eixo x, n√£o sabemos se come√ßa com 0 ou 1 e o nome dos nossos atributos n√£o est√£o informativos. 4.4 Escalas Bom, agora √© a hora de melhorar nosso gr√°fico, que por sinal est√° bem estranho, vamos l√°! Primeiro, vamos mudar o nome dos nossos atributos em cada eixo e tamb√©m mudar as escalas: ggplot(escola, aes(x=aluno_id, y=aluno_media, color=aluno_curso)) + geom_point(na.rm = TRUE) + scale_x_continuous(name = &quot;Identifica√ß√£o dos alunos&quot;, breaks = 1:6) Opa, assim ficou mais claro, mas, mudar o nome de apenas um eixo n√£o move moinhos, n√£o, pera? üëè. ggplot(escola, aes(x=aluno_id, y=aluno_media, color=aluno_curso)) + geom_point(na.rm = TRUE) + scale_x_continuous(name = &quot;Identifica√ß√£o dos alunos&quot;, breaks = 1:6) + scale_y_continuous(name=&quot;M√©dia dos alunos&quot;, breaks = seq(1, 6, 0.5)) Ainda falta mais informa√ß√µes, por exemplo, o t√≠tulo do nosso gr√°fico. cores &lt;- c(&quot;Estat√≠stica&quot; = &quot;green&quot;, &quot;Historia&quot; = &quot;red&quot;, &quot;Matem√°tica&quot; = &quot;blue&quot;) ggplot(escola, aes(x=aluno_id, y=aluno_media, color=aluno_curso)) + geom_point(na.rm = TRUE) + scale_x_continuous(name = &quot;Identifica√ß√£o dos alunos&quot;, breaks = 1:6) + scale_y_continuous(name=&quot;M√©dia dos alunos&quot;, breaks = seq(1, 6, 0.5)) + scale_color_manual(&quot;Mat√©rias&quot;, values = cores) + ggtitle(&quot;M√©dia dos alunos da faculdade y&quot;) √â poss√≠vel observar que o aluno com id 5 n√£o possui m√©dia em nenhuma mat√©ria. Agora, que tal dividirmos nosso gr√°fico em sub gr√°ficos? üÜí. 4.5 Subplots Bom, quero visualizar de forma que divida nosso gr√°fico em subgr√°ficos, usando facet_wrap, desta forma: cores &lt;- c(&quot;Estat√≠stica&quot; = &quot;green&quot;, &quot;Historia&quot; = &quot;red&quot;, &quot;Matem√°tica&quot; = &quot;blue&quot;) ggplot(escola, aes(x=aluno_sexo, y=aluno_media, color=aluno_curso)) + geom_point(na.rm = TRUE) + facet_grid(~ aluno_avaliacao) + labs(title=&quot;Notas dos alunos por grid&quot;, x = &quot;Sexo dos alunos&quot;, y = &quot;M√©dia dos alunos&quot;) + scale_color_manual(&quot;Mat√©rias&quot;, values = cores) + ggtitle(&quot;M√©dia dos alunos da faculdade y&quot;) Dessa vez, usei labs para demonstrar que essa fun√ß√£o tamb√©m altera o nome dos eixos. 4.6 Temas Por √∫ltimo, vamos deixar nosso gr√°fico mais elegante, usando os temas do pr√≥prio pacote: cores &lt;- c(&quot;Estat√≠stica&quot; = &quot;green&quot;, &quot;Historia&quot; = &quot;red&quot;, &quot;Matem√°tica&quot; = &quot;blue&quot;) ggplot(escola, aes(x=aluno_id, y=aluno_media, color=aluno_curso)) + geom_point(na.rm = TRUE) + scale_x_continuous(name = &quot;Identifica√ß√£o dos alunos&quot;, breaks = 1:6) + scale_y_continuous(name=&quot;M√©dia dos alunos&quot;, breaks = seq(1, 6, 0.5)) + scale_color_manual(&quot;Mat√©rias&quot;, values = cores) + ggtitle(&quot;M√©dia dos alunos da faculdade y&quot;) + theme_bw() Bom, sabemos que o ggplot √© bem completo, mas, s√≥ abordamos uma pequena parcela. Com o tempo vamos adicionando mais materiais. Para se aprofundar no pacote, veja nossas an√°lises no dataAt üíÉ. 4.7 Recomenda√ß√µes Tipos de gr√°ficos Ciencia de dados em R dataviz "],
["references.html", "5 References", " 5 References "]
]
